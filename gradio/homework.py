import fasttext
import gradio as gr
import os
import sys

dataset_path = "dataset.txt"
if not os.path.exists(dataset_path):
    print(f"‚ùå –§–∞–π–ª {dataset_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)

print("üìö –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
epochs = 30
temp_model_path = "temp_model.ftz"

model = None
for epoch in range(1, epochs + 1):
    model = fasttext.train_supervised(
        input=dataset_path,
        epoch=1,  
        lr=1.0,
        wordNgrams=2,
        bucket=200000,
        dim=100,
        loss='softmax',
        verbose=0  
    )
    
    model.save_model(temp_model_path)
    
    percent = round((epoch / epochs) * 100, 2)
    print(f"üîÑ –≠–ø–æ—Ö–∞ {epoch}/{epochs} ‚Äî {percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

model_path = "lang_detect.ftz"
model.save_model(model_path)
print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")

def predict_language(text):
    if not text.strip():
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
    label, confidence = model.predict(text)
    lang = label[0].replace("__label__", "")
    conf = round(confidence[0] * 100, 2)
    return f"{lang} ({conf}%)"

iface = gr.Interface(
    fn=predict_language,
    inputs=gr.Textbox(label="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"),
    outputs=gr.Textbox(label="–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫"),
    title="üåç Real-Time Language Detector",
    description="–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (uz, ru, en, kk, qq) –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞",
    live=True
)
# –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
test_path = "dataset.txt"  # —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ fastText
if os.path.exists(test_path):
    result = model.test(test_path)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–µ:")
    print(f"  –ö–æ–ª-–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {result[0]}")
    print(f"  Precision: {round(result[1]*100, 2)}%")
    print(f"  Recall:    {round(result[2]*100, 2)}%")
else:
    print("\n‚ö†Ô∏è test.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏.")


if __name__ == "__main__":
    iface.launch(share=True)
    
